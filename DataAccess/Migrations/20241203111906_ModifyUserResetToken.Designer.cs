// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(MnogoLibContext))]
    [Migration("20241203111906_ModifyUserResetToken")]
    partial class ModifyUserResetToken
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CommentMaterial", b =>
                {
                    b.Property<int>("IdComment")
                        .HasColumnType("int")
                        .HasColumnName("id_comment");

                    b.Property<int>("IdMaterial")
                        .HasColumnType("int")
                        .HasColumnName("id_material");

                    b.HasKey("IdComment", "IdMaterial")
                        .HasName("pk_Comment_Material_0");

                    b.HasIndex("IdMaterial");

                    b.ToTable("Comment_Material", (string)null);
                });

            modelBuilder.Entity("Domain.Entites.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountIdUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountIdUser");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Domain.Models.Author", b =>
                {
                    b.Property<int>("IdAuthor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_author");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAuthor"), 1L, 1);

                    b.Property<string>("NameAuthor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name_author");

                    b.HasKey("IdAuthor")
                        .HasName("pk_Authors_id_author");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Domain.Models.AuthorStatus", b =>
                {
                    b.Property<int>("IdAuthorStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_author_status");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAuthorStatus"), 1L, 1);

                    b.Property<string>("NameAuthorStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("name_author_status");

                    b.HasKey("IdAuthorStatus")
                        .HasName("pk_Author_Status_id_author_status");

                    b.ToTable("Author_Status", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_category");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategory"), 1L, 1);

                    b.Property<string>("NameCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name_category");

                    b.HasKey("IdCategory")
                        .HasName("pk_Categories_id_category");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Models.Chat", b =>
                {
                    b.Property<int>("IdChat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_chat");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdChat"), 1L, 1);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("created_time");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<int>("IdOwner")
                        .HasColumnType("int")
                        .HasColumnName("id_owner");

                    b.Property<int>("LastUpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("last_update_by");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_update_time");

                    b.Property<string>("NameChat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name_chat");

                    b.HasKey("IdChat")
                        .HasName("pk_Chat_id_chat");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("IdOwner");

                    b.HasIndex("LastUpdateBy");

                    b.ToTable("Chat", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ChatUser", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<int>("IdChat")
                        .HasColumnType("int")
                        .HasColumnName("id_chat");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("created_time");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.HasKey("IdUser", "IdChat");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("IdChat");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Relationship25");

                    b.ToTable("Chat_Users", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.Property<int>("IdComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_comment");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdComment"), 1L, 1);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_update_time");

                    b.Property<string>("TextComment")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("text_comment");

                    b.HasKey("IdComment")
                        .HasName("pk_Comments_id_comment");

                    b.HasIndex("IdUser");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Models.CommentRate", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<int>("IdComment")
                        .HasColumnType("int")
                        .HasColumnName("id_comment");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_update_time");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasColumnName("value");

                    b.HasKey("IdUser", "IdComment");

                    b.HasIndex("IdComment");

                    b.ToTable("Comment_Rates", (string)null);
                });

            modelBuilder.Entity("Domain.Models.File", b =>
                {
                    b.Property<int>("IdFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_file");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFile"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("created_time");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<int>("LastUpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("last_update_by");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_update_time");

                    b.Property<string>("NameFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name_file");

                    b.Property<string>("PathFile")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("path_file");

                    b.HasKey("IdFile")
                        .HasName("pk_Files_id_file");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastUpdateBy");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Domain.Models.Genre", b =>
                {
                    b.Property<int>("IdGenre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_genre");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGenre"), 1L, 1);

                    b.Property<string>("NameGenre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("name_genre");

                    b.HasKey("IdGenre")
                        .HasName("pk_Genres_id_genre");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Domain.Models.GroupMaterial", b =>
                {
                    b.Property<int>("IdGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_group");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGroup"), 1L, 1);

                    b.Property<string>("DescriptionGroup")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description_group");

                    b.Property<string>("NameGroup")
                        .IsRequired()
                        .HasMaxLength(115)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(115)")
                        .HasColumnName("name_group");

                    b.HasKey("IdGroup");

                    b.ToTable("Group_Materials", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Material", b =>
                {
                    b.Property<int>("IdMaterial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_material");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMaterial"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("created_time");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<string>("DescriptionMaterial")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description_material");

                    b.Property<int>("FileIcon")
                        .HasColumnType("int")
                        .HasColumnName("file_icon");

                    b.Property<int>("IdAuthor")
                        .HasColumnType("int")
                        .HasColumnName("id_author");

                    b.Property<int>("IdAuthorStatus")
                        .HasColumnType("int")
                        .HasColumnName("id_author_status");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("id_category");

                    b.Property<int>("LastUpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("last_update_by");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_update_time");

                    b.Property<string>("NameMaterial")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("name_material");

                    b.HasKey("IdMaterial")
                        .HasName("pk_Materials_id_material");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("IdAuthor");

                    b.HasIndex("IdAuthorStatus");

                    b.HasIndex("IdCategory");

                    b.HasIndex("LastUpdateBy");

                    b.HasIndex(new[] { "FileIcon" }, "IX_Relationship26");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Domain.Models.MaterialFile", b =>
                {
                    b.Property<int>("IdMaterial")
                        .HasColumnType("int")
                        .HasColumnName("id_material");

                    b.Property<int>("IdFile")
                        .HasColumnType("int")
                        .HasColumnName("id_file");

                    b.Property<int>("Chapter")
                        .HasColumnType("int")
                        .HasColumnName("chapter");

                    b.Property<byte?>("FrameNumber")
                        .HasColumnType("tinyint")
                        .HasColumnName("frame_number");

                    b.Property<int?>("Volume")
                        .HasColumnType("int")
                        .HasColumnName("volume");

                    b.HasKey("IdMaterial", "IdFile")
                        .HasName("pk_Material_File_0");

                    b.HasIndex("IdFile");

                    b.ToTable("Material_File", (string)null);
                });

            modelBuilder.Entity("Domain.Models.MaterialsUserStatus", b =>
                {
                    b.Property<int>("IdMaterial")
                        .HasColumnType("int")
                        .HasColumnName("id_material");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<int>("IdUserStatus")
                        .HasColumnType("int")
                        .HasColumnName("id_user_status");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_update_time");

                    b.HasKey("IdMaterial", "IdUser", "IdUserStatus")
                        .HasName("pk_Materials_User_Status_0");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserStatus");

                    b.ToTable("Materials_User_Status", (string)null);
                });

            modelBuilder.Entity("Domain.Models.MessageStatus", b =>
                {
                    b.Property<int>("IdMessageStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_message_status");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMessageStatus"), 1L, 1);

                    b.Property<string>("NameMessageStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name_message_status");

                    b.HasKey("IdMessageStatus")
                        .HasName("pk_Message_Status_id_message_status");

                    b.ToTable("Message_Status", (string)null);
                });

            modelBuilder.Entity("Domain.Models.MessagesUser", b =>
                {
                    b.Property<int>("IdMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_message");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMessage"), 1L, 1);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("created_time");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime>("DeliverDate")
                        .HasColumnType("datetime")
                        .HasColumnName("deliver_date");

                    b.Property<int>("IdChat")
                        .HasColumnType("int")
                        .HasColumnName("id_chat");

                    b.Property<int>("IdMessageStatus")
                        .HasColumnType("int")
                        .HasColumnName("id_message_status");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_update_time");

                    b.Property<string>("TextMessage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("text_message");

                    b.HasKey("IdMessage")
                        .HasName("pk_Messages_User_id_message");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("IdChat");

                    b.HasIndex("IdMessageStatus");

                    b.HasIndex("IdUser");

                    b.ToTable("Messages_User", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Payment", b =>
                {
                    b.Property<int>("IdPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_payment");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPayment"), 1L, 1);

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("card_number");

                    b.Property<string>("Cvv")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(true)
                        .HasColumnType("nchar(3)")
                        .HasColumnName("cvv")
                        .IsFixedLength();

                    b.Property<DateTime>("ExpressionDate")
                        .HasColumnType("date")
                        .HasColumnName("expression_date");

                    b.HasKey("IdPayment");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("Domain.Models.PaymentUser", b =>
                {
                    b.Property<int>("IdPayment")
                        .HasColumnType("int")
                        .HasColumnName("id_payment");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.HasKey("IdPayment", "IdUser");

                    b.HasIndex("IdUser");

                    b.ToTable("Payment_Users", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Rate", b =>
                {
                    b.Property<int>("IdRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_rate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRate"), 1L, 1);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<int>("IdMaterial")
                        .HasColumnType("int")
                        .HasColumnName("id_material");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_update_time");

                    b.Property<byte>("ValueRate")
                        .HasColumnType("tinyint")
                        .HasColumnName("value_rate");

                    b.HasKey("IdRate")
                        .HasName("pk_Rates_id_rate");

                    b.HasIndex("IdMaterial");

                    b.HasIndex("IdUser");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_role");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRole"), 1L, 1);

                    b.Property<string>("NameRole")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("name_role");

                    b.HasKey("IdRole")
                        .HasName("pk_Roles_id_role");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"), 1L, 1);

                    b.Property<bool>("AcceptTerms")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("created_time");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<string>("EmailUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email_user");

                    b.Property<int>("IdRole")
                        .HasColumnType("int")
                        .HasColumnName("id_role");

                    b.Property<int>("LastUpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("last_update_by");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_update_time");

                    b.Property<string>("NicknameUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nickname_user");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password_user");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Verified")
                        .HasColumnType("datetime2");

                    b.HasKey("IdUser")
                        .HasName("pk_Users_id_user");

                    b.HasIndex("IdRole");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.UserStatus", b =>
                {
                    b.Property<int>("IdUserStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_user_status");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUserStatus"), 1L, 1);

                    b.Property<string>("NameUserStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("name_user_status");

                    b.HasKey("IdUserStatus")
                        .HasName("pk_User_Status_id_user_status");

                    b.ToTable("User_Status", (string)null);
                });

            modelBuilder.Entity("MaterialsGenre", b =>
                {
                    b.Property<int>("IdMaterial")
                        .HasColumnType("int")
                        .HasColumnName("id_material");

                    b.Property<int>("IdGenre")
                        .HasColumnType("int")
                        .HasColumnName("id_genre");

                    b.HasKey("IdMaterial", "IdGenre")
                        .HasName("pk_Materials_Genres_0");

                    b.HasIndex("IdGenre");

                    b.ToTable("Materials_Genres", (string)null);
                });

            modelBuilder.Entity("RelatedMaterial", b =>
                {
                    b.Property<int>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("id_group");

                    b.Property<int>("IdMaterial")
                        .HasColumnType("int")
                        .HasColumnName("id_material");

                    b.HasKey("IdGroup", "IdMaterial");

                    b.HasIndex("IdMaterial");

                    b.ToTable("Related_materials", (string)null);
                });

            modelBuilder.Entity("CommentMaterial", b =>
                {
                    b.HasOne("Domain.Models.Comment", null)
                        .WithMany()
                        .HasForeignKey("IdComment")
                        .IsRequired()
                        .HasConstraintName("fk_Comments_Comment_Material_1");

                    b.HasOne("Domain.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("IdMaterial")
                        .IsRequired()
                        .HasConstraintName("fk_Materials_Comment_Material_2");
                });

            modelBuilder.Entity("Domain.Entites.RefreshToken", b =>
                {
                    b.HasOne("Domain.Models.User", "Account")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AccountIdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Models.Chat", b =>
                {
                    b.HasOne("Domain.Models.User", "DeletedByNavigation")
                        .WithMany("ChatDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Chat__deleted_by__1CDC41A7");

                    b.HasOne("Domain.Models.User", "IdOwnerNavigation")
                        .WithMany("ChatIdOwnerNavigations")
                        .HasForeignKey("IdOwner")
                        .IsRequired()
                        .HasConstraintName("fk_Users_Chat_0");

                    b.HasOne("Domain.Models.User", "LastUpdateByNavigation")
                        .WithMany("ChatLastUpdateByNavigations")
                        .HasForeignKey("LastUpdateBy")
                        .IsRequired()
                        .HasConstraintName("FK__Chat__last_updat__1BE81D6E");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("IdOwnerNavigation");

                    b.Navigation("LastUpdateByNavigation");
                });

            modelBuilder.Entity("Domain.Models.ChatUser", b =>
                {
                    b.HasOne("Domain.Models.User", "CreatedByNavigation")
                        .WithMany("ChatUserCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("Relationship25");

                    b.HasOne("Domain.Models.User", "DeletedByNavigation")
                        .WithMany("ChatUserDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Chat_User__delet__2B2A60FE");

                    b.HasOne("Domain.Models.Chat", "IdChatNavigation")
                        .WithMany("ChatUsers")
                        .HasForeignKey("IdChat")
                        .IsRequired()
                        .HasConstraintName("Relationship22");

                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("ChatUserIdUserNavigations")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("Relationship21");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("IdChatNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("fk_Users_Comments_0");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Domain.Models.CommentRate", b =>
                {
                    b.HasOne("Domain.Models.Comment", "IdCommentNavigation")
                        .WithMany("CommentRates")
                        .HasForeignKey("IdComment")
                        .IsRequired()
                        .HasConstraintName("Relationship24");

                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("CommentRates")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("Relationship23");

                    b.Navigation("IdCommentNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Domain.Models.File", b =>
                {
                    b.HasOne("Domain.Models.User", "CreatedByNavigation")
                        .WithMany("FileCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Files__deleted_t__247D636F");

                    b.HasOne("Domain.Models.User", "DeletedByNavigation")
                        .WithMany("FileDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Files__deleted_b__2665ABE1");

                    b.HasOne("Domain.Models.User", "LastUpdateByNavigation")
                        .WithMany("FileLastUpdateByNavigations")
                        .HasForeignKey("LastUpdateBy")
                        .IsRequired()
                        .HasConstraintName("FK__Files__last_upda__257187A8");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("LastUpdateByNavigation");
                });

            modelBuilder.Entity("Domain.Models.Material", b =>
                {
                    b.HasOne("Domain.Models.User", "CreatedByNavigation")
                        .WithMany("MaterialCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Materials__creat__0D99FE17");

                    b.HasOne("Domain.Models.User", "DeletedByNavigation")
                        .WithMany("MaterialDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Materials__delet__0F824689");

                    b.HasOne("Domain.Models.File", "FileIconNavigation")
                        .WithMany("Materials")
                        .HasForeignKey("FileIcon")
                        .IsRequired()
                        .HasConstraintName("Relationship26");

                    b.HasOne("Domain.Models.Author", "IdAuthorNavigation")
                        .WithMany("Materials")
                        .HasForeignKey("IdAuthor")
                        .IsRequired()
                        .HasConstraintName("fk_Authors_Materials_1");

                    b.HasOne("Domain.Models.AuthorStatus", "IdAuthorStatusNavigation")
                        .WithMany("Materials")
                        .HasForeignKey("IdAuthorStatus")
                        .IsRequired()
                        .HasConstraintName("fk_Author_Status_Materials_2");

                    b.HasOne("Domain.Models.Category", "IdCategoryNavigation")
                        .WithMany("Materials")
                        .HasForeignKey("IdCategory")
                        .IsRequired()
                        .HasConstraintName("fk_Categories_Materials_0");

                    b.HasOne("Domain.Models.User", "LastUpdateByNavigation")
                        .WithMany("MaterialLastUpdateByNavigations")
                        .HasForeignKey("LastUpdateBy")
                        .IsRequired()
                        .HasConstraintName("FK__Materials__last___0E8E2250");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("FileIconNavigation");

                    b.Navigation("IdAuthorNavigation");

                    b.Navigation("IdAuthorStatusNavigation");

                    b.Navigation("IdCategoryNavigation");

                    b.Navigation("LastUpdateByNavigation");
                });

            modelBuilder.Entity("Domain.Models.MaterialFile", b =>
                {
                    b.HasOne("Domain.Models.File", "IdFileNavigation")
                        .WithMany("MaterialFiles")
                        .HasForeignKey("IdFile")
                        .IsRequired()
                        .HasConstraintName("fk_Files_Material_File_2");

                    b.HasOne("Domain.Models.Material", "IdMaterialNavigation")
                        .WithMany("MaterialFiles")
                        .HasForeignKey("IdMaterial")
                        .IsRequired()
                        .HasConstraintName("fk_Materials_Material_File_1");

                    b.Navigation("IdFileNavigation");

                    b.Navigation("IdMaterialNavigation");
                });

            modelBuilder.Entity("Domain.Models.MaterialsUserStatus", b =>
                {
                    b.HasOne("Domain.Models.Material", "IdMaterialNavigation")
                        .WithMany("MaterialsUserStatuses")
                        .HasForeignKey("IdMaterial")
                        .IsRequired()
                        .HasConstraintName("fk_Materials_Materials_User_Status_2");

                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("MaterialsUserStatuses")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("fk_Users_Materials_User_Status_1");

                    b.HasOne("Domain.Models.UserStatus", "IdUserStatusNavigation")
                        .WithMany("MaterialsUserStatuses")
                        .HasForeignKey("IdUserStatus")
                        .IsRequired()
                        .HasConstraintName("fk_User_Status_Materials_User_Status_3");

                    b.Navigation("IdMaterialNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("IdUserStatusNavigation");
                });

            modelBuilder.Entity("Domain.Models.MessagesUser", b =>
                {
                    b.HasOne("Domain.Models.User", "DeletedByNavigation")
                        .WithMany("MessagesUserDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Messages___delet__21A0F6C4");

                    b.HasOne("Domain.Models.Chat", "IdChatNavigation")
                        .WithMany("MessagesUsers")
                        .HasForeignKey("IdChat")
                        .IsRequired()
                        .HasConstraintName("fk_Chat_Messages_User_1");

                    b.HasOne("Domain.Models.MessageStatus", "IdMessageStatusNavigation")
                        .WithMany("MessagesUsers")
                        .HasForeignKey("IdMessageStatus")
                        .IsRequired()
                        .HasConstraintName("fk_Message_Status_Messages_User_2");

                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("MessagesUserIdUserNavigations")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("fk_Users_Messages_User_0");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("IdChatNavigation");

                    b.Navigation("IdMessageStatusNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Domain.Models.PaymentUser", b =>
                {
                    b.HasOne("Domain.Models.Payment", "IdPaymentNavigation")
                        .WithMany("PaymentUsers")
                        .HasForeignKey("IdPayment")
                        .IsRequired()
                        .HasConstraintName("Relationship31");

                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("PaymentUsers")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("Relationship32");

                    b.Navigation("IdPaymentNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Domain.Models.Rate", b =>
                {
                    b.HasOne("Domain.Models.Material", "IdMaterialNavigation")
                        .WithMany("Rates")
                        .HasForeignKey("IdMaterial")
                        .IsRequired()
                        .HasConstraintName("fk_Materials_Rates_1");

                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("Rates")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("fk_Users_Rates_0");

                    b.Navigation("IdMaterialNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.HasOne("Domain.Models.Role", "IdRoleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .IsRequired()
                        .HasConstraintName("fk_Roles_Users_0");

                    b.Navigation("IdRoleNavigation");
                });

            modelBuilder.Entity("MaterialsGenre", b =>
                {
                    b.HasOne("Domain.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("IdGenre")
                        .IsRequired()
                        .HasConstraintName("fk_Genres_Materials_Genres_2");

                    b.HasOne("Domain.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("IdMaterial")
                        .IsRequired()
                        .HasConstraintName("fk_Materials_Materials_Genres_1");
                });

            modelBuilder.Entity("RelatedMaterial", b =>
                {
                    b.HasOne("Domain.Models.GroupMaterial", null)
                        .WithMany()
                        .HasForeignKey("IdGroup")
                        .IsRequired()
                        .HasConstraintName("Relationship29");

                    b.HasOne("Domain.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("IdMaterial")
                        .IsRequired()
                        .HasConstraintName("Relationship30");
                });

            modelBuilder.Entity("Domain.Models.Author", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("Domain.Models.AuthorStatus", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("Domain.Models.Chat", b =>
                {
                    b.Navigation("ChatUsers");

                    b.Navigation("MessagesUsers");
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.Navigation("CommentRates");
                });

            modelBuilder.Entity("Domain.Models.File", b =>
                {
                    b.Navigation("MaterialFiles");

                    b.Navigation("Materials");
                });

            modelBuilder.Entity("Domain.Models.Material", b =>
                {
                    b.Navigation("MaterialFiles");

                    b.Navigation("MaterialsUserStatuses");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("Domain.Models.MessageStatus", b =>
                {
                    b.Navigation("MessagesUsers");
                });

            modelBuilder.Entity("Domain.Models.Payment", b =>
                {
                    b.Navigation("PaymentUsers");
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("ChatDeletedByNavigations");

                    b.Navigation("ChatIdOwnerNavigations");

                    b.Navigation("ChatLastUpdateByNavigations");

                    b.Navigation("ChatUserCreatedByNavigations");

                    b.Navigation("ChatUserDeletedByNavigations");

                    b.Navigation("ChatUserIdUserNavigations");

                    b.Navigation("CommentRates");

                    b.Navigation("Comments");

                    b.Navigation("FileCreatedByNavigations");

                    b.Navigation("FileDeletedByNavigations");

                    b.Navigation("FileLastUpdateByNavigations");

                    b.Navigation("MaterialCreatedByNavigations");

                    b.Navigation("MaterialDeletedByNavigations");

                    b.Navigation("MaterialLastUpdateByNavigations");

                    b.Navigation("MaterialsUserStatuses");

                    b.Navigation("MessagesUserDeletedByNavigations");

                    b.Navigation("MessagesUserIdUserNavigations");

                    b.Navigation("PaymentUsers");

                    b.Navigation("Rates");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Models.UserStatus", b =>
                {
                    b.Navigation("MaterialsUserStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
